import * as React from 'react';
import './index.less';
import service from './service';
import { IPropsBasic } from 'kts-scaffold-framework/modules';
// import Sdk from 'kts-platform-sdk';
import { Icon } from 'antd';
import 'antd/lib/popconfirm/style/css';


export interface DocumentCompareProps extends IPropsBasic {
    /** 单据id */
    targetDocUuid: string;
    /** 单据类型 */
    targetDocumentType: string;
    /** 行id */
    targetLineID: string;
    /** 获取展示数据 */
    getData?: () => Promise<any[]>;
}

export class DocumentCompareState {
    /** 对比展示数据 */
    allData: any[] = [];
}

export default class DocumentCompare extends React.PureComponent<DocumentCompareProps, DocumentCompareState> {

    constructor(props: DocumentCompareProps) {
        super(props);
        this.state = new DocumentCompareState();
    }

    componentDidMount() {
        this.getCompareData();
    }

    /** 获取对比数据 */
    getCompareData = () => {
        if (this.props.getData) { /** props传入的方法 */
            this.props.getData().then((res: any) => {
                if (res) {
                    this.setState({
                        allData: res
                    });
                }
            });
        } else {
            getData()({
                targetDocUuid: this.props.targetDocUuid,
                targetDocumentType: this.props.targetDocumentType,
                targetLineID: this.props.targetLineID,
            }).then((res: any) => {
                if (res) {
                    this.setState({
                        allData: res
                    });
                }
            });
        }
    }

    render() {
        const allData = this.state.allData;
        return (
            <div className="document-compare">
                {
                    allData &&
                    allData.map((element, inx) => {
                        return (
                            <div className="singlePanel" key={inx}>
                                <div className="title marginBottom10">条目行</div>
                                <div className="flexCss currentLine">
                                    {
                                        element.currentLine.data &&
                                        element.currentLine.data.map((data:any, index:number) => {
                                            return this.getLineRender(data, index);
                                        })
                                    }
                                </div>
                                <div className="flexCss brotherLines">
                                    {
                                        element.brotherLines &&
                                        element.brotherLines.map((data:any, index:number) => {
                                            return (
                                                <div className="flexCss" key={index}>
                                                    {
                                                        data.data.map((child:any, childInx:number) => {
                                                            return this.getLineRender(child, childInx);
                                                        })
                                                    }
                                                </div>
                                            );
                                        })
                                    }
                                    {/* {
                                        element.brotherLines.data &&
                                        element.brotherLines.data.map((data, index) => {
                                            return this.getLineRender(data, index);
                                        })
                                    } */}
                                </div>
                                {
                                    element.refLines &&
                                    element.refLines.map((ref:any, refInx:number) => {
                                        return (
                                            <div key={refInx}>
                                                <div className="line">
                                                    <span>{ref.name}</span>
                                                    <span>{ref.docID}</span>
                                                    {
                                                        ref.msg &&
                                                        <span><Icon type="jinggao" className="jinggao" />{ref.msg}</span>
                                                    }
                                                </div>
                                                {
                                                    ref.lineInfos &&
                                                    ref.lineInfos.map((data:any, index:number) => {
                                                        return (
                                                            <div className="flexCss" key={index}>
                                                                {
                                                                    data.data.map((child:any, childInx:number) => {
                                                                        return this.getLineRender(child, childInx);
                                                                    })
                                                                }
                                                            </div>
                                                        );
                                                    })
                                                }
                                            </div>
                                        );
                                    })
                                }
                            </div>
                        );
                    })
                }
            </div>
        );
    }

    /** 获取行 */
    private getLineRender = (data:any, index:number) => {
        if (index === 0) {
            return (
                <div key={index} className="nowrap" ><span className="documentNo">{data.val}</span></div>
            );
        }
        if (index === 1) {
            return (
                <div key={index} className="nowrap" style={{ flex: 1 }}><span className="documentName">{data.val}</span></div>
            );
        }
        return (
            <div key={index} className="nowrap" style={{ width: '180px' }}>
                <div style={{ float: 'left' }}>{data.key}</div>
                <div className="showVal">{data.val}</div>
            </div>
        );
    }
}

/** 从后台获取对比数据 */
function getData<T = any>(url: string = '/document/relation-reference/queryByTargetDocumentUUIDAndLine') {
    return async (options: T): Promise<any[]> => {
        const res: any = await service.post(url, options).end({});
        return !res.er && res.res ? res.res : [];
    }
}