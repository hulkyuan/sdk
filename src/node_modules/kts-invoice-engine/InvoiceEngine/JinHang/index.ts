import IAction from '../IAction';
import { InvoiceMap, IGoodsInfo } from '../InvoiceMap';
import request from 'superagent';

//航信
export default class HangXin implements IAction {
    URL = '';
    sendData = (url, data) => {

        const response = request.post(url).set("Content-Type", "text/xml; charset=utf-8").send(data).then((res: any) => {
            var s1 = '<return xsi:type="xsd:string">';
            var i = res.text.lastIndexOf(s1);
            var i1 = res.text.lastIndexOf('</return>');
            var rstr = '';
            if (i > 0 && i1 > 0 && i1 > i) {
                rstr = res.text.substring(i + s1.length, i1);
            }
            //实例 
            //错误 ：3102;导入数据验证失败！;3100011111;10010035
            //正确 : 0;;3100011111;10010035
            // 错误代码|错误信息|发票代码|发票号码
            //console.log(JSON.stringify(rstr));
            var strArray = rstr.split(";");
            var obj;
            if (strArray[0] !== '0') {
                obj = {
                    returncode: strArray[0],
                    returnmsg: strArray[1],
                    body: null
                };
            } else {
                obj = {
                    returncode: strArray[0],
                    returnmsg: strArray[1],
                    invoiceCode: strArray[2],
                    invoiceNo: strArray[3],
                    body: rstr
                };
            }
            //console.log(obj);
            return obj;
        });
        return response;
    }

    fpkj = (url, data) => {
        return this.dru(url, data);
    }
    fpdy = (url, data) => {
        this.sendData(url, data);
    }
    fpzf = async (url, data) => {
        // 类型 1专用发票 2普通发票 ; 发票代码 ； 发票号码
        //kpjk1(70,'1,3100153130,54646508');
        const str = `${data.invoiceType},${data.invoiceCode},${data.invoiceNo}`;
        const res = this.createHeader(70, str);
        return this.sendData(url, res);
    }
    //获取当前开票代码号码
    fphm = (url) => {
        const res = this.createHeader(14, '10,0');
        return this.sendData(url, res);
    }
    //发票查询
    fpcx = (url, data) => {
        //s1 = "Select FPZL 发票种类,FPDM 发票代码,FPHM 发票号码,FPHXZ 发票行性质,JE 金额,SLV 税率,SE 税额,"
        //    + "SPMC 商品名称,GGXH 规格型号,JLDW 单位,SL 数量,DJ 单价,HSJBZ 含税价标志,FLBM 分类编码,FPMXXH 序号 "
        //    + "From XXFP_MX Where FPDM = '3100153130' and FPHM = 54646493 ";
        const s1 = `${data.invoiceCode},${data.invoiceNo}`;

        //FPZL 发票种类 
        //     s 增值税专票 c 增值税普票 g 收购发票 p 电子发票
        const res = this.createHeader(50, s1);
        ////////////////////////////////////////执行SQL语句   返回(-1错误 0无数据 百旺数据具体行数,航天返回1有数据）
        ////////////////////////////////////////执行完成后    CBStrs 返回字段名(#29分隔) 或 错误信息

        return this.sendData(url, res);
    }
    //生成折扣行 
    //折扣行只保留商品名称，规格型号、计量单位为空，数量,单价为零
    rebuildDetailList = (goodsInfos: Array<any>) => {
        let source = goodsInfos.map((item, index) => {
            return {
                ...item,
                index
            }
        });
        const find = source.filter((item: IGoodsInfo) => item.lineDiscount === '3').reverse();
        for (let i = 0; i < find.length; i++) {
            const newElement = {
                item: find[i].item,
                taxScheme: find[i].taxScheme,
                amount: find[i].discountAmount,
                lineDiscount: '4',
                quantity: '0',
                price: '0',
                specification: '',
                measurementDimension: '',
                taxAmount: String(find[i].discountAmount * find[i].taxScheme),
                taxCode: find[i].taxCode,
                goodsTaxItem: find[i].goodsTaxItem,
                goodsCode: find[i].goodsCode,
                includeTaxSign: '0'
            };
            const index = find[i].index;
            goodsInfos.splice(index + 1, 0, newElement);
        }
        return goodsInfos;
    }
    /**
     * 导入发票
     */
    dru = async (url: string, origin: InvoiceMap) => {
        const data: InvoiceMap = JSON.parse(JSON.stringify(origin));
        data.goodsInfos = this.rebuildDetailList(data.goodsInfos);
        const s2 = '||';   /////////字段分隔符
        let s1;
        let res;
        let response;
        //成功返回 0
        /////////////////////////////导入发票主表
        //0 明细条数,单据编号,购方编号
        //3 购方名称,税号
        //5 地址电话，银行账号
        //7 金额,税额,税率
        //10 收款人,复核人
        //12 销方账号,主要商品名称
        //14 清单模式(0~8 设定明细条数超过转清单，0 始终是清单模式)	
        //15 对应蓝字发票号码,对应蓝字发票代码
        //17 是否使用优惠政策 (0、1) 
        //18 0税类型  (0 0%   1 免税	  2 不征税)			
        //19 红字发票利用蓝字发票数据	

        //注意： 明细条数、总金额、总税额
        s1 = (data.goodsInfos && data.goodsInfos.length) + s2 + (data.billingData || '') + s2 + '123' + s2
            + (data.buyerName || '') + s2 + (data.buyerTaxID || '') + s2
            + (data.buyerAddrTel || '') + s2 + (data.buyerFinancialAccount || '') + s2
            + (data.taxExclusiveTotalAmount || '') + s2 + (data.taxTotalAmount || '') + s2 + (data.comprehensiveTaxRate || '') + s2
            + (data.payee || '') + s2 + (data.checker || '') + s2
            + (data.sellerFinancialAccount || '') + s2 + (data.mainGoodsName || '') + s2 + (data.inventory || '8') + s2
            + (data.invoiceCode || '') + s2 + (data.invoiceNo || '') + s2
            + '' + s2 + '' + s2 + (data.redTag || '')
        //2 
        // s1 = '2' + s2 + 'X150208001' + s2 + '123' + s2
        //     + '开票测试1' + s2 + '310106666888866' + s2
        //     + '购方地址电话123456' + s2 + '购方银行账号12345678' + s2
        //     + '232' + s2 + '' + s2 + '' + s2
        //     + '收款人' + s2 + '复核人' + s2
        //     + '销方账号' + s2 + '商品1' + s2 + '8';
        res = this.createHeader(1, s1);
        response = await this.sendData(url, res);//////////////////////////////////////导入发票主表
        if (response.returncode !== '0') {
            return response;
        }

        s1 = data.note;
        res = this.createHeader(2, s1);//////////////////////////////////////导入发票备注
        response = await this.sendData(url, res);
        if (response.returncode !== '0') {
            return response;
        }

        /////////////////////////////////////////导入发票明细
        //0 商品编号,商品名称，规格型号，计量单位
        //4 数量,单价,含税标志(0-不含税单价 1-含税单价  2-不含税单价＋含税金额 3-含税单价＋含税金额)
        //7 金额,税率,税额
        //10 发票行性质,序号,商品税目  (发票行性质：0－正常发票行；3－被折扣行；4－折扣行)
        //13 税务编码(19位)

        //注意： 发票行性质,序号

        let items: IGoodsInfo[] = data.goodsInfos || [];
        for (let i = 0; i < items.length; i++) {
            s1 = items[i].goodsCode + s2 + items[i].item + s2 + items[i].specification + s2 + items[i].measurementDimension + s2
                + items[i].quantity + s2 + items[i].price + s2 + items[i].includeTaxSign + s2
                + items[i].amount + s2 + items[i].taxScheme + s2 + items[i].taxAmount + s2
                + items[i].lineDiscount + s2 + (i + 1) + s2 + items[i].goodsTaxItem + s2 + items[i].taxCode;
            res = this.createHeader(3, s1);//////////////////////////////////////导入发票明细
            response = await this.sendData(url, res);
            if (response.returncode !== '0') {
                return response;
            }
        }
        res = this.createHeader(4, '');//////////////////////////////////////导入发票
        response = await this.sendData(url, res);
        if (response.returncode !== '0') {
            return response;
        }
        //开票成功后返回的是下一张即将开票的发票代码和号码，千万别搞错了
        res = this.createHeader(5, '');
        response = await this.sendData(url, res);
        return response;

    }
    createHeader = (Lx, xDs) => {
        let data = '<?xml version="1.0"?>';
        data = data + '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" ';
        data = data + 'xmlns:xsd="http://www.w3.org/2001/XMLSchema" ';
        data = data + 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ';
        data = data + 'xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/">';
        data = data + '<SOAP-ENV:Body SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">';
        data = data + '<NS1:kpjk1 xmlns:NS1="urn:fwkpjk_WIntf-Ifwkpjk_W">';
        data = data + '<Lx xsi:type="xsd:int">' + Lx + '</Lx>';
        data = data + '<xDs xsi:type="xsd:string">' + xDs + '</xDs>';
        data = data + '</NS1:kpjk1>';
        data = data + '</SOAP-ENV:Body></SOAP-ENV:Envelope>';
        return data;
    }
} 